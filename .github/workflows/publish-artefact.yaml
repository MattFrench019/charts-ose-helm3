name: "Integration Tests and Publish on Tag"

on:
  push:
    tags:
    - 'autonity-[0-9]+.[0-9]+.[0-9]+*'
    - 'autonity-demo-[0-9]+.[0-9]+.[0-9]+*'
    - 'autonity-network-[0-9]+.[0-9]+.[0-9]+*'

jobs:
  integration_tests_publish_on_tag:
    runs-on: ubuntu-20.04

    steps:
    - name: git checkout
      uses: actions/checkout@v2

    - name: Set chart name
      run: |
        echo '::set-env name=CHART_NAME::'$(echo ${GITHUB_REF##*/} | sed -E s'/-[0-9]+\.[0-9]+\.[0-9]+$//g')

    - name: Set useful variables
      run: |
        echo '::set-env name=CHART_PATH::stable/'$CHART_NAME
        echo '::set-env name=ACTOR_LOWERCASE::'$(echo $GITHUB_ACTOR | tr '[:upper:]' '[:lower:]')
        echo '::set-env name=SHORT_SHA::'$(echo $GITHUB_SHA|head -c 7)
        echo '::set-env name=S3_BUCKET_NAME::charts-ose.clearmatics.com'

    - name: Get useful variables
      run: |
        echo 'Chart name: '$CHART_NAME
        echo 'Chart path: '$CHART_PATH
        echo 'Actor: '$GITHUB_ACTOR
        echo 'Actor Lowercase: '$ACTOR_LOWERCASE
        echo 'Short SHA: '$SHORT_SHA
        echo 'GitHub Run ID: '$GITHUB_RUN_ID

    - name: Setup gcloud environment
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.2
      with:
        version: '290.0.1'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure the kubeconfig
      run: gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER_NAME }} --zone ${{ secrets.GCP_PROJECT_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Install helm
      uses: azure/setup-helm@v1
      with:
        version: '3.2.4'
      id: install

    - name: Add the external Helm chart repositories
      run: |
        helm repo add stable https://kubernetes-charts.storage.googleapis.com/
        helm repo add charts-ose.clearmatics.com https://charts-ose.clearmatics.com

    - name: List the active repositories and update the dependencies
      run: |
        helm repo list
        helm dependency update $CHART_PATH

    - name: Deploy the chart
      run: |
        kubectl create namespace $ACTOR_LOWERCASE-$GITHUB_RUN_ID
        helm install $CHART_NAME-$SHORT_SHA $CHART_PATH --namespace $ACTOR_LOWERCASE-$GITHUB_RUN_ID
        # Sadly --wait fails, so have to sleep, look to maybe pull in mock test to solve
        # this problem another way
        sleep 120

    - name: Run the tests
      run: helm test $CHART_NAME-$SHORT_SHA --namespace $ACTOR_LOWERCASE-$GITHUB_RUN_ID

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Sync repo locally
      run: |
        mkdir -p repo
        aws s3 sync s3://${S3_BUCKET_NAME} repo

    - name: Package the chart
      run: |
        helm package ${CHART_PATH} --destination "repo" --debug
        helm repo index ./repo

    - name: Publish the chart
      run: |
        aws s3 cp ./repo/${GITHUB_REF##*/}.tgz s3://${S3_BUCKET_NAME}

    - name: Publish the main index
      run: |
        aws s3 cp ./repo/index.yaml s3://${S3_BUCKET_NAME} --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type "text/plain"

    - name: Delete the chart
      if: ${{ always() }}
      run: |
        if [ $(helm ls -A | grep "$CHART_NAME-$SHORT_SHA" | grep "$ACTOR_LOWERCASE-$GITHUB_RUN_ID" | wc -l) -ne 0 ]
        then
          helm delete $CHART_NAME-$SHORT_SHA --namespace $ACTOR_LOWERCASE-$GITHUB_RUN_ID
        else
          echo "Error: release not found"
          exit 1
        fi

    - name: Delete the namespace
      if: ${{ always() }}
      run: |
        if [ $(kubectl get namespaces -A | grep "$ACTOR_LOWERCASE-$GITHUB_RUN_ID " | wc -l) -ne 0 ]
        then
          kubectl delete namespace $ACTOR_LOWERCASE-$GITHUB_RUN_ID;
        else
          echo "Namespace does not exist"
          # Helm does not manage namespaces, so exit with error
          exit 1
        fi
